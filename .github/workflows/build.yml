---
name: Build CI

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"
jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
  build:
    needs: release
    if: always()
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-12 ]
        arch: [ x86_64 ]
        include:
          - os: ubuntu-20.04
            arch: x86_64
            host: x86_64-linux-gnu
            make: make
            name: Linux
          - os: macos-12
            arch: x86_64
            host: x86_64-macos
            make: gmake
            name: Darwin
    env:
      PREFIX: ${{ github.workspace }}/installed
      SSL: ${{ github.workspace }}/boringssl/
      PYCURL_VERSION: pycurl-7.45.2
      CURL_VERSION: curl-7.88.1
      BORINGSSL_COMMIT: 28f96c2686459add7acedcd97cb841030bdda019
      PYCURL_URL: https://files.pythonhosted.org/packages/a8/af/24d3acfa76b867dbd8f1166853c18eefc890fc5da03a48672b38ea77ddae/pycurl-7.45.2.tar.gz

    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.20.1'

      - uses: actions/checkout@v3

      - name: Install Simple Dependencies
        run: ./command.sh deps simple

      - run: go version

      - name: Build BoringSSL
        run: ./command.sh boringssl

      - name: Download Curl
        run: curl -L https://curl.se/download/${{ env.CURL_VERSION }}.tar.xz -o ${{ env.CURL_VERSION }}.tar.xz

      - name: Build Curl
        run: |
          ./command.sh build simple ${{ env.PREFIX }} ${{ env.SSL }}/build
          echo 'LD_LIBRARY_PATH="$LD_LIBRARY_PATH":${{ env.SSL }}/build:${{ env.PREFIX }}/lib' >> $GITHUB_ENV
          ${{ env.PREFIX }}/bin/curl https://httpbin.org/anything --cert-compression brotli --alps --grease --sign-cert-timestamps --ocsp --share-handshake --http2

      - name: Download PyCURL
        if: github.ref_type == 'tag'
        run: curl -L ${{ env.PYCURL_URL }} -o ${{ env.PYCURL_VERSION }}.tar.gz

      - name: Build PyCURL Wheel
        if: github.ref_type == 'tag'
        run: ./command.sh pycurl ${{ env.PREFIX }} ${{ env.SSL }}/build

      - name: Package
        if: github.ref_type == 'tag'
        run: |
          ls -rt ${{ env.PYCURL_VERSION }}/dist/*.whl | tail -n 1 | sed 's:^.*/:pycurl_release_file=:' >> $GITHUB_ENV
          cd ${{ env.PREFIX }}
          tar cjf curl-patch-${{ github.ref_name }}-${{ matrix.name }}-${{ matrix.arch }}.tar.bz2 bin lib include share
          echo "release_file=curl-patch-${{ github.ref_name }}-${{ matrix.name }}-${{ matrix.arch }}.tar.bz2" >> $GITHUB_ENV

      - name: Upload Curl Release Asset
        if: github.ref_type == 'tag'
        id: upload-curl-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.PREFIX }}/${{ env.release_file }}
          asset_name: ${{ env.release_file }}
          asset_content_type: application/x-bzip

      - name: Upload PyCURL Release Asset
        if: github.ref_type == 'tag'
        id: upload-pycurl-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.workspace }}/${{ env.PYCURL_VERSION}}/dist/${{ env.pycurl_release_file }}
          asset_name: ${{ env.pycurl_release_file }}
          asset_content_type: application/zip
