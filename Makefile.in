
SHELL := bash
.ONESHELL:
.SHELLFLAGS := -euc
.DELETE_ON_ERROR:

BROTLI_VERSION := 1.0.9
BORINGSSL_COMMIT := 28f96c2686459add7acedcd97cb841030bdda019

NGHTTP2_VERSION := 1.51.0
NGHTTP2 := nghttp2-$(NGHTTP2_VERSION)
NGHTTP2_URL := https://github.com/nghttp2/nghttp2/releases/download/v$(NGHTTP2_VERSION)/$(NGHTTP2).tar.bz2

LIBPSL_VERSION := 0.21.2
LIBPSL := libpsl-$(LIBPSL_VERSION)
LIBPSL_URL := https://github.com/rockdaboot/libpsl/releases/download/$(LIBPSL_VERSION)/$(LIBPSL).tar.gz

CARES_VERSION := 1.19.0
CARES := c-ares-$(CARES_VERSION)
CARES_URL := https://c-ares.org/download/$(CARES).tar.gz

LIBIDN2_VERSION := 2.3.4
LIBIDN2 := libidn2-$(LIBIDN2_VERSION)
LIBIDN2_URL := https://gitlab.com/libidn/libidn2/uploads/54f6d239283bbdc75d4dbd732ced04e4/$(LIBIDN2).tar.gz

# In case this is changed, update build-and-test-make.yml as well
NSS_VERSION := nss-3.88
NSS_URL := https://ftp.mozilla.org/pub/security/nss/releases/NSS_3_88_RTM/src/nss-3.88-with-nspr-4.35.tar.gz

CURL_VERSION := curl-7.88.1

brotli_install_dir := $(abspath brotli-$(BROTLI_VERSION)/out/installed)
brotli_static_libs := $(brotli_install_dir)/lib/libbrotlicommon-static.a $(brotli_install_dir)/lib/libbrotlidec-static.a
nss_install_dir := $(abspath $(NSS_VERSION)/dist/Release)
nss_static_libs := $(nss_install_dir)/lib/libnss_static.a
boringssl_install_dir := $(abspath boringssl/build)
boringssl_static_libs := $(boringssl_install_dir)/lib/libssl.a $(boringssl_install_dir)/lib/libcrypto.a
nghttp2_install_dir := $(abspath $(NGHTTP2)/installed)
nghttp2_static_libs := $(nghttp2_install_dir)/lib/libnghttp2.a
cares_install_dir := $(abspath $(CARES)/installed)
cares_static_libs := $(cares_install_dir)/lib/libcares.a
libpsl_install_dir := $(abspath $(LIBPSL)/installed)
libpsl_static_libs := $(libpsl_install_dir)/lib/libpsl.a
libidn2_install_dir := $(abspath $(LIBIDN2)/installed)
libidn2_static_libs := $(libidn2_install_dir)/lib/libidn2.a

# Dependencies needed to compile the Chrome version
chrome_libs := $(brotli_static_libs) $(boringssl_static_libs) $(nghttp2_static_libs) $(cares_static_libs) $(libpsl_static_libs) $(libidn2_static_libs)

# The following variables will be set by the configure script.
prefix = @prefix@
exec_prefix = @exec_prefix@
srcdir = @abs_srcdir@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
build = @build@
# Whether to link curl with libcurl statically.
static_build = @static_build@
# Whether the user provided a specific find for zlib
with_zlib = @with_zlib@
# Path to be passed to curl's --with-ca-bundle configure option.
with_ca_bundle = @with_ca_bundle@
# Path to be passed to curl's --with-ca-path configure option.
with_ca_path = @with_ca_path@

CC = @CC@
CXX = @CXX@
STRIP = @STRIP@

# Auto-generate Makefile help.
# Borrowed from https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
help: ## Show this help message
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
.PHONY: help
.DEFAULT_GOAL := help

all: chrome-build
test: chrome-checkbuild
clean: chrome-clean
.PHONY: all test clean

chrome-build: $(CURL_VERSION)/.chrome ## Build the Chrome version of curl-impersonate
	cd $(CURL_VERSION)
	# Don't pass this Makefile's MAKEFLAGS
	$(MAKE) MAKEFLAGS=
.PHONY: chrome-build

chrome-checkbuild: ## Run basic checks on the built binary
ifeq ($(host),$(build))
	cd $(CURL_VERSION)
	# Make sure all needed features were compiled in
	./src/curl -V | grep -q zlib
	./src/curl -V | grep -q brotli
	./src/curl -V | grep -q nghttp2
	./src/curl -V | grep -q BoringSSL
	./src/curl -V | grep -q libidn2
	./src/curl -V | grep -q libpsl
	./src/curl -V | grep -q c-ares
	$(info Build OK)
else
	$(info Cross compiling, skipping checkbuild)
endif
.PHONY: chrome-checkbuild

chrome-install: ## Install the Chrome version of curl after build
	cd $(CURL_VERSION)
	$(MAKE) install-exec MAKEFLAGS=
.PHONY: chrome-install

chrome-install-strip: ## Like 'chrome-install', but strip binaries for smaller size
	cd $(CURL_VERSION)
	$(MAKE) install-exec MAKEFLAGS=
	# We could have used 'install-strip' but then the docs would be installed as well.
	# Instead strip manually.
	$(STRIP) @bindir@/curl
.PHONY: chrome-install-strip

chrome-uninstall: ## Uninstall the Chrome version of curl-impersonate after 'make install'
	cd $(CURL_VERSION)
	$(MAKE) uninstall MAKEFLAGS=
.PHONY: chrome-uninstall

chrome-clean: ## Clean build artifacts of the Chrome version. Use after re-running './configure'
	cd $(CURL_VERSION)
	$(MAKE) clean MAKEFLAGS=
	rm -f .chrome
.PHONY: chrome-clean

clean: ## Remove all build artifacts, including dependencies
	rm -Rf brotli-$(BROTLI_VERSION).tar.gz brotli-$(BROTLI_VERSION) \
	 $(NSS_VERSION).tar.gz $(NSS_VERSION) boringssl.tar.gz boringssl $(NGHTTP2).tar.bz2 $(NGHTTP2) \
	 $(CARES).tar.gz $(CARES)  $(LIBIDN2).tar.gz $(LIBIDN2)  $(LIBPSL).tar.gz $(LIBPSL) \
	 $(CURL_VERSION).tar.xz $(CURL_VERSION)

brotli-$(BROTLI_VERSION).tar.gz:
	curl -L "https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz" \
	-o "brotli-${BROTLI_VERSION}.tar.gz"

$(brotli_static_libs): brotli-$(BROTLI_VERSION).tar.gz
	tar --skip-old-files -xf brotli-$(BROTLI_VERSION).tar.gz
	mkdir -p brotli-$(BROTLI_VERSION)/out
	cd brotli-$(BROTLI_VERSION)/out

	# Convert autoconf style os name to CMake style os name.
	case $(host_os) in           \
	  linux*)                    \
	    system_name=Linux        \
	    ;;                       \
	  darwin*)                   \
	    system_name=Darwin       \
	    ;;                       \
	  *)                         \
	    system_name=$(host_os)   \
	    ;;                       \
	esac

	@cmake@ .. -DCMAKE_BUILD_TYPE=Release \
	        -DCMAKE_INSTALL_PREFIX=./installed \
	        -DCMAKE_INSTALL_LIBDIR=lib \
	        -DCMAKE_CXX_COMPILER=$(CXX) \
	        -DCMAKE_C_COMPILER=$(CC) \
	        -DCMAKE_SYSTEM_NAME=$$system_name \
	        -DCMAKE_SYSTEM_PROCESSOR=$(host_cpu)

	@cmake@ --build . --config Release --target install


$(NSS_VERSION).tar.gz:
	curl -L -o $(NSS_VERSION).tar.gz $(NSS_URL)

$(nss_static_libs): $(NSS_VERSION).tar.gz
	tar --skip-old-files -xf $(NSS_VERSION).tar.gz

boringssl.tar.gz:
	curl -L https://boringssl.googlesource.com/boringssl/+archive/$(BORINGSSL_COMMIT).tar.gz \
	-o boringssl.tar.gz

$(boringssl_static_libs): boringssl.tar.gz
	mkdir -p $(boringssl_install_dir)
	tar --skip-old-files -xf boringssl.tar.gz -C $(boringssl_install_dir)/..
	cd $(boringssl_install_dir)


	# Convert autoconf style os name to CMake style os name.
	case $(host_os) in      \
	linux*)               \
	    system_name=Linux   \
	;;                  \
	darwin*)              \
	    system_name=Darwin  \
	;;                  \
	*)                    \
	    system_name=Linux   \
	;;                  \
	esac

	# The extra CMAKE_C_FLAGS are needed because otherwise boringssl fails to
	# compile in release mode on some systems with gcc 12 (e.g. Fedora).
	# In addition, guard these options with -Wno-unknown-warning-option to
	# prevent clang from failing on them.
	@cmake@ .. -DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_POSITION_INDEPENDENT_CODE=on \
			-DCMAKE_C_FLAGS="-Wno-unknown-warning-option -Wno-stringop-overflow -Wno-array-bounds" \
			-DCMAKE_CXX_COMPILER=$(CXX) \
			-DCMAKE_C_COMPILER=$(CC) \
			-DCMAKE_SYSTEM_NAME=$$system_name \
			-DCMAKE_SYSTEM_PROCESSOR=$(host_cpu) \
			-GNinja

	@ninja@
	# Fix the directory structure so that curl can compile against it.
	# See https://everything.curl.dev/source/build/tls/boringssl
	mkdir -p lib
	ln -sf ../crypto/libcrypto.a lib/libcrypto.a
	ln -sf ../ssl/libssl.a lib/libssl.a
	cp -Rf ../include .

$(CARES).tar.gz:
	curl -L $(CARES_URL) -o $(CARES).tar.gz

$(cares_static_libs): $(CARES).tar.gz
	tar --skip-old-files -xf $(CARES).tar.gz
	cd $(CARES)
	./configure --prefix=$(cares_install_dir) --enable-shared=no
	$(MAKE) MAKEFLAGS=
	$(MAKE) install MAKEFLAGS=

$(LIBIDN2).tar.gz:
	curl -L $(LIBIDN2_URL) -o $(LIBIDN2).tar.gz

$(libidn2_static_libs): $(LIBIDN2).tar.gz
	tar --skip-old-files -xf $(LIBIDN2).tar.gz
	cd $(LIBIDN2)
	./configure --prefix=$(libidn2_install_dir) --enable-shared=no \
	--enable-doc=no CFLAGS=-fPIC
	case $(host_os) in      \
	linux*)                 \
	    	sed -i '/#define HAVE_SYMVER_ALIAS_SUPPORT 1/d' config.h \
	;;                    \
	darwin*)              \
	    	sed -i'' '/#define HAVE_SYMVER_ALIAS_SUPPORT 1/d' config.h \
	;;                  \
	*)                    \
	        sed -i '/#define HAVE_SYMVER_ALIAS_SUPPORT 1/d' config.h \
	;;                  \
	esac

	$(MAKE) MAKEFLAGS=
	$(MAKE) install MAKEFLAGS=

$(LIBPSL).tar.gz:
	curl -L $(LIBPSL_URL) -o $(LIBPSL).tar.gz

$(libpsl_static_libs): $(LIBPSL).tar.gz $(libidn2_static_libs)
	tar --skip-old-files -xf $(LIBPSL).tar.gz
	cd $(LIBPSL)
	./configure --prefix=$(libpsl_install_dir) --enable-shared=no \
	--enable-gtk-doc-html=no --with-pic --enable-runtime=libidn2 \
	PKG_CONFIG_PATH=$(libidn2_install_dir)/lib/pkgconfig
	$(MAKE) MAKEFLAGS=
	$(MAKE) install MAKEFLAGS=

$(NGHTTP2).tar.bz2:
	curl -L $(NGHTTP2_URL) -o $(NGHTTP2).tar.bz2

$(nghttp2_static_libs): $(NGHTTP2).tar.bz2
	tar --skip-old-files -xf $(NGHTTP2).tar.bz2
	cd $(NGHTTP2)

	# Set up the configure flags to nghttp2.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to nghttp2.
	{ \
	  config_flags="--prefix=$(nghttp2_install_dir)"; \
	  config_flags="$$config_flags --with-pic --enable-lib-only"; \
	  config_flags="$$config_flags --disable-shared --disable-python-bindings"; \
	  if test -n "$(host_alias)"; then \
	    config_flags="$$config_flags --host=$(host_alias)"; \
	  fi; \
	}

	./configure $$config_flags
	$(MAKE) MAKEFLAGS=
	$(MAKE) install MAKEFLAGS=

$(CURL_VERSION).tar.xz:
	curl -L "https://curl.se/download/$(CURL_VERSION).tar.xz" \
	-o "$(CURL_VERSION).tar.xz"

# Apply the "Chorme version" patches and mark using a dummy file
$(CURL_VERSION)/.patched-chrome: $(srcdir)/curl/curl.patch
	rm -Rf $(CURL_VERSION)
	tar --skip-old-files -xf $(CURL_VERSION).tar.xz
	cd $(CURL_VERSION)
	for p in $^; do patch -p1 < $$p; done
	# Re-generate the configure script
	autoreconf -fi
	touch .patched-chrome
	rm -f .patched-ff

# This is a small hack that flags that curl was patched and configured in the "chrome" version
$(CURL_VERSION)/.chrome: $(chrome_libs)	$(CURL_VERSION).tar.xz $(CURL_VERSION)/.patched-chrome
	cd $(CURL_VERSION)

	# Set up the configure flags to curl.
	# If the user provided the --host flag to our configure script
	# (for cross compilation), then pass it on to curl.
	{ \
	  config_flags="--prefix=@prefix@"; \
	  config_flags="$$config_flags --enable-websockets"; \
	  config_flags="$$config_flags --with-nghttp2=$(nghttp2_install_dir)"; \
	  config_flags="$$config_flags --with-brotli=$(brotli_install_dir)"; \
	  config_flags="$$config_flags --with-libidn2=$(libidn2_install_dir)"; \
	  config_flags="$$config_flags --with-libpsl=$(libpsl_install_dir)"; \
	  config_flags="$$config_flags --enable-ares=$(cares_install_dir)"; \
	  config_flags="$$config_flags --with-openssl=$(boringssl_install_dir)"; \
	  config_flags="$$config_flags USE_CURL_SSLKEYLOGFILE=true"; \
	  if test "$(static_build)" = "yes"; then \
	    config_flags="$$config_flags --enable-static --disable-shared";
	  fi; \
	  if test -n "$(host_alias)"; then \
	    config_flags="$$config_flags --host=$(host_alias)"; \
	  fi; \
	  if test -n "$(with_zlib)"; then \
	    config_flags="$$config_flags --with-zlib=$(with_zlib)"; \
	  else \
	    config_flags+=" --with-zlib"; \
	  fi; \
	  if test -n "$(with_ca_bundle)"; then \
		config_flags="$$config_flags --with-ca-bundle=$(with_ca_bundle)"; \
	  fi; \
	  if test -n "$(with_ca_path)"; then \
		config_flags="$$config_flags --with-ca-path=$(with_ca_path)"; \
	  fi; \
	  add_libs="-pthread -lunistring -lidn2"; \
	  add_cppflags="-I$(boringssl_install_dir)"; \
	  add_cppflags="$$add_cppflags -I$(libpsl_install_dir)/include"; \
	  add_cppflags="$$add_cppflags -I$(libidn2_install_dir)/include"; \
	  add_cppflags="$$add_cppflags -I$(brotli_install_dir)/include"; \
	  add_ldflags="$$add_ldflags -L$(libpsl_install_dir)/lib"; \
	  add_ldflags="$$add_ldflags -L$(libidn2_install_dir)/lib"; \
	  add_ldflags="$$add_ldflags -L$(brotli_install_dir)/lib"; \
	  add_ldflags="$$add_ldflags -L$(libidn2_install_dir)/lib"; \
	}

	echo "Configuring curl with: $$config_flags"
	echo "cppflags:  $$add_cppflags"
	echo "ldflags: $$add_ldflags"
	echo "libs:    $$add_libs"

	./configure $$config_flags LDFLAGS="$$add_ldflags" CPPFLAGS="$$add_cppflags" LIBS="$$add_libs"

	grep -C4 'psl_builtin' config.log

	# Remove possible leftovers from a previous compilation
	$(MAKE) clean MAKEFLAGS=
	touch .chrome

